
# Hierarchical syntax
Grammar <- SPACING Definition* Extensions
Definition <- IDENT LEFTARROW Expression
Expression <- (Prefix+) (SLASH Prefix+)*
Prefix <- (AND / NOT)? Primary (QUESTION / STAR / PLUS)?
        / LabelExt
Primary <- IDENT !LEFTARROW {}
         / OPEN Expression CLOSE
         / Literal / Class / DOT / CCodeExt

# Packcc Extension Syntax
# value and auxil extensions are always the same and built in.
# prefix is based on the grammar file name.
Extensions <- EOF / SPACING (Extension SPACING)* EOF
Extension <- HeaderExt / EndCCodeExt
HeaderExt <- '%header' SPACING CCodeExt SPACING
EndCCodeExt <- '%%' (!EOF .)* EOF
LabelExt <- IDENT ':' IDENT / IDENT ':' OPEN IDENT CLOSE
CCodeExt <- '{' SPACING (&'{' CCodeExt / !'}' .)* '}' SPACING

# Lexical syntax
EOF <- !.
EOL <- '\r\n' / '\n' / '\r'
SPACE <- ' ' / '\t' / !.
COMMENT <- '#' (!!. .)* !.
DOT <- '.'
CLOSE <- ')'
OPEN <- '('
PLUS <- '+'
STAR <- '*'
QUESTION <- '?'
NOT <- '!'
AND <- '&'
SLASH <- '/'
LEFTARROW <- '<-'
CHAR <- '\\' [nrt'"\[\]\\]
      / '\\' [0-2][0-7][0-7]
      / '\\' [0-7][0-7]?
      / !'\\' .
SPACING <- (SPACE / COMMENT)*
frag RANGE <- CHAR '-' CHAR / CHAR
Class <- '[' '^'? (!']' RANGE)* ']' SPACING
Literal <- "'" (!"'" CHAR)* "'" SPACING
         / '"' (!'"' CHAR)* '"' SPACING
frag IDENTSTART <- [a-zA-Z_]
frag IDENTCONT <- [a-zA-Z_0-9]
IDENT <- IDENTSTART IDENTCONT* SPACING
