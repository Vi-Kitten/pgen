
# Hierarchical syntax
Grammar <- Spacing Definition+ Extensions
Definition <- Identifier LEFTARROW Expression
Expression <- Sequence (SLASH Sequence)*
Sequence <- Prefix*
Prefix <- (AND / NOT)? Suffix
Suffix <- Primary (QUESTION / STAR / PLUS)?
Primary <- Identifier !LEFTARROW
         / OPEN Expression CLOSE
         / Literal / Class / DOT

# Extension Syntax
Extensions <- EOF / (Extension Spacing)*
Extension <- PrefixExt / ValueExt / SourceExt / CCodeExt
PrefixExt <- '%prefix' Spacing Literal
ValueExt <- '%value' Spacing Literal
SourceExt <- '%source' Spacing '{' .* '}'
CCodeExt <- '%%' .* EOF
ActionExprExt <- LBRACK ActionExprExt RBRACK /
                 LBRACK (!'}' .*) Spacing RBRACK

# Lexical syntax
EOF <- !.
EOL <- '\r\n' / '\n' / '\r'
Space <- ' ' / '\t' / EOL
Comment <- '#' (!EOL .)* EOL
Spacing <- (Space / Comment)*
DOT <- '.' Spacing
CLOSE <- ')' Spacing
OPEN <- '(' Spacing
LBRACK <- '{' Spacing
RBRACK <- '}' Spacing
PLUS <- '+' Spacing
STAR <- '*' Spacing
QUESTION <- '?' Spacing
NOT <- '!' Spacing
AND <- '&' Spacing
SLASH <- '/' Spacing
LEFTARROW <- '<-' Spacing
Char <- '\\' [nrt'"\[\]\\]
      / '\\' [0-2][0-7][0-7]
      / '\\' [0-7][0-7]?
      / !'\\' .
Range <- Char '-' Char / Char
Class <- '[' '^'? (!']' Range)* ']' Spacing
Literal <- ['] (!['] Char)* ['] Spacing
         / ["] (!["] Char)* ["] Spacing
IdentStart <- [a-zA-Z_]
IdentCont <- IdentStart / [0-9]
Identifier <- IdentStart IdentCont* Spacing


%prefix "peg"
%value "void*"

%source {
#include <stdio.h>
#include <stdlib.h>
}

%%

int main() {
  peg_context_t* ctx = peg_create(NULL);
  while (peg_parse(ctx, NULL));
  peg_destroy(ctx);
  return 0;
}
