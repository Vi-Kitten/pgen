#!/bin/sh

# Clean
rm peg tmp.c PEG.c PEG.h a.out 2>/dev/null

# Generate the pgen PEG parser code from its packcc grammar.
./packcc PEG.peg

# If successful, build the pgen PEG parser.
if test -f "PEG.c"; then

  # Combine the .c and .h files
  printf "/* PEG.h */\n" > tmp.c
  cat PEG.h >> tmp.c
  printf "\n\n/* PEG.c */\n" >> tmp.c
  cat PEG.c >> tmp.c
  grep -v "#include \"PEG.h\"" tmp.c > PEG.c
  rm PEG.h tmp.c

  # Compile the parser
  cc -O0 PEG.c -o peg

else
  printf "\033[0;31mPackcc failed to build the bootstrap parser from its grammar.\033[0m\n"
  exit 1
fi


# Bootstrap pgen with its own grammar.

#./peg pgen.peg

#if test -f "pgen.h"; then
#  :;
#  cc -O0 pgen.c
#else
#  printf "\033[0;31mPackcc failed to build pgen from its grammar.\033[0m\n"
#  exit 1
#fi

# Have pgen regenerate itself.

#./pgen pgen.peg
