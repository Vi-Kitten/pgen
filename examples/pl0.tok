
// Syntax
EQ: "=";
CEQ: ":=";
SEMI: ";";
DOT: ".";
COMMA: ",";
OPEN: "(";
CLOSE: ")";
HASH: "#";

// Operators
LT: "<";
LEQ: "<=";
GT: ">";
GEQ: ">=";
PLUS: "+";
MINUS: "-";
STAR: "*";
DIV: "/";

// Keywords
VAR: "var";
PROC: "procedure";
CONST: "const";
BEGIN: "begin";
END: "end";
IF: "if";
THEN: "then";
WHILE: "while";
DO: "do";
ODD: "odd";
CALL: "call";

// [_a-zA-Z][_a-zA-Z0-9]+
IDENT: (1, 2) {
  (0, [_a-zA-Z]) -> 1;
  ((1, 2), [_a-zA-Z0-9]) -> 2;
};

// [-+]?[0-9]+
NUM: 2 {
  (0, [-+]) -> 1;
  ((0, 1, 2), [0-9]) -> 2;
};

// [\ \n\r\t]+
WS: 1 {
  ((0, 1), [ \n\r\t]) -> 1;
};

// \/\*([^*]*\*)*\/
MLCOM: 4 {
  (0, '/') -> 1;
  (1, '*') -> 2;
  (2, '*') -> 3;
  (2, [^]) -> 2;
  (3, '*') -> 3;
  (3, '/') -> 4;
  (3, [^]) -> 2;
};

// \/\/[^\n]*
SLCOM: (2, 3) {
  (0, '/') -> 1;
  (1, '/') -> 2;
  (2, [^\n]) -> 2;
  (2, [\n]) -> 3;
};

/*
// #[^\n]*\n
HSLCOM: (1, 2) {
  (0, '#') -> 1;
  (1, [^\n]) -> 1;
  (1, [\n]) -> 2;
};
*/
