# Note - This is written in normal PEG fashion, for my own understanding.
# This is not an example of the usage of pgen, it is different.


# Operators:
# /  - Try to match the left side, then try to match the right side.
# &  - Try to parse, match but rewind.
# !  - Try to parse, match if doesn't match.
# ?  - Optionally match. Failure to match does not cause the rule to fail.
# *  - Match zero or more. Returns a list of matches.
# +  - Match one or more. Returns a list of matches.
# () - Matches if all expressions within match.
# {} - Code to insert into the parser. Must return an ASTNode* or NULL to check for match.
# :  - Capture the info from a match inside the node for the current rule.

# Notes:
# Instead of using an unbalancing { or } inside a codeexpr, use the macros LB or RB.
# Instead of using "{" or "}" use the macros LBSTR or RBSTR.


##########
# PARSER #
##########

# Rules
GrammarFile    <- (_ (Directive / Definition))* _ EOF

Directive      <- '%' _ LowerIdent [^\n]*[\n]

Definition     <- LowerIdent _ StructDef? _ '<-' _ SlashExpr

StructDef      <- '<' _ StructMember (_ ',' _ StructMember)* _ '>'

StructMember   <- LowerIdent ((_ '.'/_ '[]')*)?

SlashExpr      <- ModExprList (_ '/' ModExprList)*

ModExprList    <- (_ ModExpr)*

ModExpr        <- (LowerIdent _ ':' _)? (('&' / '!') _)* BaseExpr _ ('?' / '*' / '+')*

BaseExpr       <- ('prev' / 'next')
                / UpperIdent
                / LowerIdent _ !'<'
                / CodeExpr
                / '(' _ SlashExpr _ ')'


CodeExpr       <- '{' _ (&'{' CodeExpr / !'}' .)* _ '}'


# Misc
UpperIdent     <- [_A-Z]+
LowerIdent     <- [_a-z]+
